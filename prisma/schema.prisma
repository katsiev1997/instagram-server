// prisma/schema.prisma

datasource db {
  provider = "postgresql" // Или "mysql", "sqlite", и т.д.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  username        String    @unique
  fullname        String
  profileImageUrl String?
  posts           Post[]    @relation("UserPosts")
  comments        Comment[] @relation("UserComments")
  likes           Like[]    @relation("UserLikes")
  followers       UserOnUser[] @relation("FollowerRelations")
  following       UserOnUser[] @relation("FollowingRelations")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Post {
  id        Int       @id @default(autoincrement())
  imageUrl  String
  content   String
  authorId  Int
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
  comments  Comment[] @relation("PostComments")
  likes     Like[]    @relation("PostLikes")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  authorId  Int
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId]) // Уникальность сочетания postId и userId
}

// Модель для хранения отношений "многие ко многим" между пользователями
model UserOnUser {
  id          Int     @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User    @relation("FollowerRelations", fields: [followerId], references: [id])
  following   User    @relation("FollowingRelations", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId]) // Уникальность сочетания followerId и followingId
}
